# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Edit.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


"""
处理逻辑:
    Activate Pinyin Check?---------------------Y-----------------> Case A
                          --N--> Check No Notes Slides Only?--Y--> Case B ----> @Processing...
                                                            --N--> Case C
    @Processing:
    Case A:                    ----> Correct pinyin                   ---->
    Case B:---->Has Notes Pages----> Skip          ---->No Notes Pages---->Set Time
    Case C:                    ----> Read only                        ---->
"""

# TODO: 待完善功能列表(部分显示在代码中，请在PyCharm左下方的TODO栏里查看):
#  (Checked)只查看无备注的选项
#  (Checked)0s确认窗口
#  (Checked)图片的提取与音频的连接
#  (Checked)PPTX与GUI的图片浏览控件对接
#  (Checked)主播ID与性别在GUI中的设置
#  有备注时的开头与末尾留白
#  (Checked)结束程序代码
#  (Checked)防止试听音频被删代码
#  不启用拼音检查后隐藏拼音框
#  (Checked)整体布局
#  (Semi-Checked)textBrowser控件中文字的字体字号设置
#  (Checked)图片控件的大小设置
#  音频倍速——暂时不考虑，中期后进行速度调节的开发

from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QApplication
from PyQt5.Qt import QThread, pyqtSignal, QMutex

import AudioGenerator
import VideoGenerator
import NotesExtract
import tts
import requests
import contextlib
import wave
import os
import time

qmut_1 = QMutex()  # 创建线程锁


class UpdateThread(QThread):
    _UpdateSignal = pyqtSignal(str)
    _iSignal = pyqtSignal(int)
    notes = []
    _pinyin = []

    def __init__(self):
        super().__init__()

    def __del__(self):
        self.wait()

    def Setlist(self, notes, _pinyin):
        self.notes = notes
        self._pinyin = _pinyin
        self.start()

    def run(self):
        qmut_1.lock()  # 加锁
        # 预处理拼音列表
        for i in range(len(self.notes)):
            if self.notes[i] != "\n":
                text, pinyin = tts.tts(self.notes[i], Ui_SetTimeWindow._gender,
                                       Ui_SetTimeWindow._gender_opt, True, True)
                self._pinyin.append(pinyin)
            else:
                self._pinyin.append("")
            # print(i + 1)  # 看线程跑到哪一页备注了
            self._iSignal.emit(i)
            self._UpdateSignal.emit(self._pinyin[i])
        qmut_1.unlock()  # 解锁


class Ui_SetTimeWindow(object):
    _file_dir = ''
    _save_dir = ''
    page = 1  # 当前幻灯片所在页数
    Temp_i = 0  # 另一条线程中拼音列表的长度
    notes = []  # 备注列表
    _pinyin = []  # 存储备注的拼音
    _time = []  # 存储每页幻灯片备注生成音频的秒数
    _gender = '1'  # 默认男声
    _gender_opt = '100453'  # 默认主播ID
    _is_pinyin_check = False  # 是否启用了拼音检查
    is_no_notes_only = False  # 是否只查看无备注
    _no_notes_page = 0  # [只查看无备注页]模式的索引
    _no_notes = []  # 记录无备注幻灯片的页数位置
    _zero_second = []  # 记录0s备注幻灯片的页数
    _notes_exist = []
    _translate = QtCore.QCoreApplication.translate

    def __init__(self):
        self.thread1 = UpdateThread()  # 创建线程

    def setupUi(self, SetTimeWindow):
        SetTimeWindow.setObjectName("SetTimeWindow")
        SetTimeWindow.resize(984, 868)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(SetTimeWindow.sizePolicy().hasHeightForWidth())
        SetTimeWindow.setSizePolicy(sizePolicy)
        SetTimeWindow.setMouseTracking(False)
        SetTimeWindow.setTabletTracking(False)
        SetTimeWindow.setAutoFillBackground(False)
        self.gridLayout_3 = QtWidgets.QGridLayout(SetTimeWindow)
        self.gridLayout_3.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.PinyinLabel = QtWidgets.QLabel(SetTimeWindow)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.PinyinLabel.setFont(font)
        self.PinyinLabel.setObjectName("PinyinLabel")
        self.gridLayout.addWidget(self.PinyinLabel, 2, 3, 1, 1)
        self.StatusLabel = QtWidgets.QLabel(SetTimeWindow)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.StatusLabel.setFont(font)
        self.StatusLabel.setObjectName("StatusLabel")
        self.gridLayout.addWidget(self.StatusLabel, 0, 1, 1, 5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.PreSlideButton = QtWidgets.QPushButton(SetTimeWindow)
        self.PreSlideButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PreSlideButton.sizePolicy().hasHeightForWidth())
        self.PreSlideButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.PreSlideButton.setFont(font)
        self.PreSlideButton.setCheckable(False)
        self.PreSlideButton.setObjectName("PreSlideButton")
        self.horizontalLayout_3.addWidget(self.PreSlideButton)
        self.NextSlideButton = QtWidgets.QPushButton(SetTimeWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.NextSlideButton.sizePolicy().hasHeightForWidth())
        self.NextSlideButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.NextSlideButton.setFont(font)
        self.NextSlideButton.setObjectName("NextSlideButton")
        self.horizontalLayout_3.addWidget(self.NextSlideButton)
        self.CompleteButton = QtWidgets.QPushButton(SetTimeWindow)
        self.CompleteButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CompleteButton.sizePolicy().hasHeightForWidth())
        self.CompleteButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.CompleteButton.setFont(font)
        self.CompleteButton.setObjectName("CompleteButton")
        self.horizontalLayout_3.addWidget(self.CompleteButton)
        self.gridLayout.addLayout(self.horizontalLayout_3, 4, 6, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 2, 1, 1)
        self.PinyinEdit = QtWidgets.QTextEdit(SetTimeWindow)
        self.PinyinEdit.setObjectName("PinyinEdit")
        self.gridLayout.addWidget(self.PinyinEdit, 3, 3, 1, 4)
        self.BackButton = QtWidgets.QPushButton(SetTimeWindow)
        self.BackButton.setMaximumSize(QtCore.QSize(107, 16777215))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.BackButton.setFont(font)
        self.BackButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.BackButton.setCheckable(False)
        self.BackButton.setAutoDefault(False)
        self.BackButton.setDefault(False)
        self.BackButton.setFlat(False)
        self.BackButton.setObjectName("BackButton")
        self.gridLayout.addWidget(self.BackButton, 0, 6, 1, 1, QtCore.Qt.AlignRight)
        self.label = QtWidgets.QLabel(SetTimeWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(16)
        sizePolicy.setVerticalStretch(9)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(960, 540))
        self.label.setMaximumSize(QtCore.QSize(960, 540))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 1, 1, 6)
        self.TextLabel = QtWidgets.QLabel(SetTimeWindow)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.TextLabel.setFont(font)
        self.TextLabel.setObjectName("TextLabel")
        self.gridLayout.addWidget(self.TextLabel, 2, 1, 1, 1)
        self.TextBrowser = QtWidgets.QTextBrowser(SetTimeWindow)
        self.TextBrowser.setMinimumSize(QtCore.QSize(0, 100))
        self.TextBrowser.setObjectName("TextBrowser")
        self.gridLayout.addWidget(self.TextBrowser, 3, 1, 1, 2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.DisplayTimeLabel = QtWidgets.QLabel(SetTimeWindow)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.DisplayTimeLabel.setFont(font)
        self.DisplayTimeLabel.setObjectName("DisplayTimeLabel")
        self.horizontalLayout_5.addWidget(self.DisplayTimeLabel)
        self.DisplayTime = QtWidgets.QDoubleSpinBox(SetTimeWindow)
        self.DisplayTime.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DisplayTime.sizePolicy().hasHeightForWidth())
        self.DisplayTime.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        self.DisplayTime.setFont(font)
        self.DisplayTime.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.DisplayTime.setDecimals(1)
        self.DisplayTime.setMaximum(1000.0)
        self.DisplayTime.setObjectName("DisplayTime")
        self.horizontalLayout_5.addWidget(self.DisplayTime)
        self.gridLayout.addLayout(self.horizontalLayout_5, 4, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 2, 4, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 0, 0, 1, 1)

        self.retranslateUi(SetTimeWindow)
        QtCore.QMetaObject.connectSlotsByName(SetTimeWindow)

    def retranslateUi(self, SetTimeWindow):
        _translate = QtCore.QCoreApplication.translate
        SetTimeWindow.setWindowTitle(_translate("SetTimeWindow", "Edit"))
        self.PinyinLabel.setText(_translate("SetTimeWindow", "备注拼音："))
        self.StatusLabel.setText(_translate("SetTimeWindow", "当前页数："))
        self.PreSlideButton.setText(_translate("SetTimeWindow", "上一张"))
        self.NextSlideButton.setText(_translate("SetTimeWindow", "下一张"))
        self.CompleteButton.setText(_translate("SetTimeWindow", "修改完成"))
        self.BackButton.setText(_translate("SetTimeWindow", "返回主界面"))
        self.label.setText(_translate("SetTimeWindow", "TextLabel"))
        self.TextLabel.setText(_translate("SetTimeWindow", "备注文本："))
        self.DisplayTimeLabel.setText(_translate("SetTimeWindow", "请为当前空白备注页设置展示时长(秒):"))

    def setDir(self, file_dir, save_dir):
        self._file_dir = file_dir
        self._save_dir = save_dir

    # (执行文件用)翻页函数
    def turnPage(self, re=False):
        # 点击了前一页且在无备注页将时间设置为0s
        if self.notes[self.page - 1] == '\n' and self.DisplayTime.value() == 0:
            return
        if self.is_no_notes_only:
            self.displayNoNotes(re)
        else:
            self.display(re)

    # (process函数用)建立无备注幻灯片的页数索引
    def _indexOfNoNotes(self):
        for i in range(len(self.notes)):
            if self.notes[i] == '\n':
                self._no_notes.append(i + 1)

    def Setpinyin(self, _str):
        if len(self._pinyin) > self.Temp_i:
            self._pinyin[self.Temp_i] = _str
        else:
            self._pinyin.append(_str)

    def SetTemp_i(self, _int):
        self.Temp_i = _int

    # (执行文件用)进入编辑窗口后执行的预备函数
    def process(self, mainWindow):

        # 获取主播ID、备注内容并初始化记录时间的time数组和幻灯片展示图片
        if mainWindow.ChooseGender.currentText() == '男声':
            self._gender = '1'
            self._gender_opt = mainWindow.dict_male[mainWindow.ChooseSpeakerId.currentText()]
        else:
            self._gender = '0'
            self._gender_opt = mainWindow.dict_female[mainWindow.ChooseSpeakerId.currentText()]

        # TODO: 有能力的话编写一个可以提取ppt文件备注的函数
        self.notes = NotesExtract.ObtainPptNote(self._file_dir)
        self._time = [0.0] * len(self.notes)
        self._is_pinyin_check = mainWindow.PinyinCheck.isChecked()
        self.is_no_notes_only = mainWindow.NoNotesCheck.isChecked()

        # 设置按键的可按性
        if len(self.notes) == 1:
            self.NextSlideButton.setEnabled(False)

        self.thread1._UpdateSignal.connect(self.Setpinyin)
        self.thread1._iSignal.connect(self.SetTemp_i)
        self.thread1.Setlist(self.notes, self._pinyin)
        time.sleep(0.5)

        if self.is_no_notes_only:
            self._indexOfNoNotes()
            if len(self._no_notes) == 0:
                self.is_no_notes_only = False
            else:
                self.displayNoNotes(False, False)
        self.display(False, False)

    # (display和download函数用)将翻页前的拼音字段和时间设置保存(Case A C)
    def save(self):
        # Case1:当前页为最新页且备注非空
        if self.page == len(self._pinyin) + 1 and self.notes[self.page - 1] != '\n':
            self._pinyin.append(self.PinyinEdit.toPlainText())
        # Case2:当前页为最新页但备注为空
        elif self.page == len(self._pinyin) + 1:
            self._pinyin.append('\n')
            self._time[self.page - 1] = self.DisplayTime.value()
        # Case3:该页备注已完成首次更新,保存修改
        elif self.notes[self.page - 1] != '\n':
            self._pinyin[self.page - 1] = self.PinyinEdit.toPlainText()
        else:
            self._time[self.page - 1] = self.DisplayTime.value()

    # (display函数用)对有备注的幻灯片进行处理
    def _hasNotes(self):
        QApplication.processEvents()
        self.StatusLabel.setText(self._translate("MainWindow",
                                                 "<html><head/><body><p><span style=\" "
                                                 "font-size:12pt; color:#0000cd;\""
                                                 ">请处理第" + str(self.page) + "页幻灯片!"
                                                                            "</span></p></body></html>"))

        # 获取并输出当前页的备注及拼音
        # 清空当前文本框中的内容
        self.TextBrowser.clear()
        self.PinyinEdit.clear()
        """
        # 判断是否需要更新拼音数组
        if self.page == len(self._pinyin) + 1:
            text, pinyin = tts.tts(self.notes[self.page - 1], self._gender,
                                   self._gender_opt, True, True)
            QApplication.processEvents()
            self.TextBrowser.setText(text)
            self.PinyinEdit.setText(pinyin)
        else:
            self.TextBrowser.setText(self.notes[self.page - 1])
            self.PinyinEdit.setText(self._pinyin[self.page - 1])
        """
        self.TextBrowser.setText(self.notes[self.page - 1])

        QApplication.processEvents()
        self.NextSlideButton.setEnabled(False)
        self.PreSlideButton.setEnabled(False)

        QApplication.processEvents()
        # 等待线程把拼音跑出来，防止越界
        while True:
            if self.page > len(self._pinyin):
                time.sleep(0.5)
            else:
                break

        # print(self.page)
        # print(len(self._pinyin))
        # print(self._pinyin)
        self.PinyinEdit.setText(self._pinyin[self.page - 1])

        self.NextSlideButton.setEnabled(True)
        self.PreSlideButton.setEnabled(True)
        QApplication.processEvents()

    # (display函数用)对没有备注的幻灯片设置时长
    def _set_time(self):
        QApplication.processEvents()
        self.DisplayTime.setValue(self._time[self.page - 1])
        self.StatusLabel.setText(self._translate("MainWindow",
                                                 "<html><head/><body><p><span style=\" "
                                                 "font-size:12pt; color:#0000cd;\""
                                                 ">请设置第" + str(self.page) + "页空白备注幻灯片在视频中的时长!"
                                                                            "</span></p></body></html>"))
        self.TextBrowser.setText(self._translate("MainWindow",
                                                 "<html><head/><body><p><span style=\" "
                                                 "font-size:10pt; color:#ff0000;\""
                                                 ">请设置第" + str(self.page) + "页空白备注幻灯片在视频中的时长!"
                                                                            "</span></p></body></html>"))
        self.PinyinEdit.clear()

    # (display函数用)普通模式的翻页函数(Case A C)
    def _turnPage(self, re=False):
        # 判断当前页数并根据备注情况设置状态标签
        # 用户点击了[上一张]
        if re:
            self.page = self.page - 1
        # 用户点击了[下一张]
        else:
            self.page = self.page + 1

    # (display函数用)[只查看无备注页]模式的翻页函数(Case B)
    def _turnNoNotesPage(self, re=False):
        # 上一张
        if re:
            self._no_notes_page = self._no_notes_page - 1
        # 下一张
        else:
            self._no_notes_page = self._no_notes_page + 1
        self.page = self._no_notes[self._no_notes_page - 1]

    # 展示幻灯片预览图片
    def _display_pic(self):
        img = QImage(os.path.join(os.getcwd(), 'pics', "幻灯片" + str(self.page) + '.jpg'))  # 创建图片实例
        size = QSize(960, 540)
        pixImg = QPixmap.fromImage(
            img.scaled(size, Qt.IgnoreAspectRatio))  # 修改图片实例大小并从QImage实例中生成QPixmap实例以备放入QLabel控件中

        self.label.resize(960, 540)
        self.label.setPixmap(pixImg)

    # 核心函数之一
    # 为无备注的幻灯片设置展示时长(Case B)
    def displayNoNotes(self, re=False, notFirst=True):
        # 如果不是第一次执行该函数,则读取当前秒数并翻页
        if notFirst:
            self._time[self.page - 1] = self.DisplayTime.value()
            if self._no_notes_page < len(self._no_notes):
                self._turnNoNotesPage(re)
        # 否则,找到第一页没有备注的幻灯片
        else:
            self.page = self._no_notes[self._no_notes_page]
            self._no_notes_page = self._no_notes_page + 1

        self._display_pic()
        # 然后提示用户设置时长
        self._set_time()

        # 根据读取的页数位置设置[上一张]和[下一张]按钮
        if self._no_notes_page == 1 and len(self._no_notes) != 1:
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(False)
            self.NextSlideButton.setEnabled(True)
        elif self._no_notes_page == len(self._no_notes) and len(self._no_notes) != 1:
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(True)
            self.NextSlideButton.setEnabled(False)
        elif self._no_notes_page == 1 and len(self._no_notes) == 1:
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(False)
            self.NextSlideButton.setEnabled(False)
        elif 1 < self._no_notes_page < len(self._no_notes):
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(True)
            self.NextSlideButton.setEnabled(True)

        # 全部无备注的幻灯片都处理完后将[修改完成]按键设置为可以点击
        if self._no_notes_page == len(self._no_notes):
            QApplication.processEvents()
            self.CompleteButton.setEnabled(True)

    # 核心函数之一
    # 编辑有备注的幻灯片中的文字及拼音,并为无备注的幻灯片设置展示时长(Case A C)
    def display(self, re=False, notFirst=True):
        # 如果不是第一次执行该函数
        # 则保存上一次用户的操作结果并翻页
        if notFirst:
            self.save()
            self._turnPage(re)

        self._display_pic()
        # 当前页备注为空
        if self.notes[self.page - 1] == '\n':
            QApplication.processEvents()
            self.DisplayTime.show()
            self.DisplayTimeLabel.show()
            self._set_time()
        # 当前页备注非空
        else:
            QApplication.processEvents()
            self.DisplayTime.hide()
            self.DisplayTimeLabel.hide()
            self._hasNotes()

        # 根据读取的页数位置设置[上一张]和[下一张]按钮
        if self.page == 1 and len(self.notes) != 1:
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(False)
            self.NextSlideButton.setEnabled(True)
        elif self.page == len(self.notes) and len(self.notes) != 1:
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(True)
            self.NextSlideButton.setEnabled(False)
        elif 1 < self.page < len(self.notes):
            QApplication.processEvents()
            self.PreSlideButton.setEnabled(True)
            self.NextSlideButton.setEnabled(True)

        # 全部页数的幻灯片都处理完后将[修改完成]按键设置为可以点击
        if self.page == len(self.notes):
            QApplication.processEvents()
            self.CompleteButton.setEnabled(True)

    # 获取音频时长
    def _get_time(self, file_path):
        with contextlib.closing(wave.open(file_path, 'r')) as f:
            frames = f.getnframes()
            rate = f.getframerate()
            wav_length = frames / float(rate)
        return wav_length  # 单位为秒

    # 核心函数之一,通过接口下载音频
    def download(self, finishWindow):
        if self.is_no_notes_only:
            self._time[self.page - 1] = self.DisplayTime.value()
        else:
            self.save()
        for i in range(0, len(self.notes)):
            self.StatusLabel.setText(self._translate("MainWindow",
                                                     "<html><head/><body><p><span style=\" "
                                                     "font-size:14pt; color:#0000cd;\""
                                                     ">正在处理第" + str(i + 1) + "页幻灯片..."
                                                                             "</span></p></body></html>"))
            # 合成空白音频
            if self.notes[i] == '\n':
                AudioGenerator.BlankAudio(self._time[i], str(i + 1) + ".wav")
                continue
            # 判断合成模式
            if self._is_pinyin_check:
                chara = self._pinyin[i]
            else:
                chara = self.notes[i]
            url = tts.tts(chara, self._gender, self._gender_opt, not self._is_pinyin_check)
            QApplication.processEvents()
            # 简易错误处理
            # TODO: 优化错误处理代码--转换为异常处理
            if url is None:
                self.StatusLabel.setText(self._translate("MainWindow",
                                                         "<html><head/><body><p><span style=\" "
                                                         "font-size:14pt; color:#ff0000;\""
                                                         ">转换出错!请重试!</span></p></body></html>"))
                return

            # 从网页下载音频
            f = requests.get(url)
            with open(str(i + 1) + ".wav", "wb") as code:
                code.write(f.content)
            self._time[i] = self._get_time(str(i + 1) + ".wav") + 1
            self._notes_exist.append(i)

        # 检查0s备注幻灯片
        for i in range(0, len(self.notes)):
            if self._time[i] == 0:
                self._zero_second.append(i)

        # 将单独音频文件合并
        AudioGenerator.MergeAudio("", os.path.abspath(os.path.join(os.getcwd(), "..", "audio.wav")),
                                  len(self.notes), self._zero_second, self._notes_exist)
        # 删除单独音频文件,保留合并后的文件
        AudioGenerator.DeleteAudio()
        self.StatusLabel.setText(self._translate("MainWindow",
                                                 "<html><head/><body><p><span style=\""
                                                 " font-size:12pt; color:#21ff06;\""
                                                 ">音频转换完成!</span></p></body></html>"))

        QApplication.processEvents()
        self.StatusLabel.setText(self._translate("MainWindow",
                                                 "<html><head/><body><p><span style=\" "
                                                 "font-size:12pt; color:#0000cd;\""
                                                 ">正在进行视频转换..."
                                                 "</span></p></body></html>"))
        VideoGenerator.video(self._file_dir,
                             os.path.join(os.path.abspath(os.path.join(os.getcwd(), "..")), "audio.wav"),
                             os.path.join(self._save_dir, "video.mp4"), self._time)
        QApplication.processEvents()
        self.StatusLabel.setText(self._translate("MainWindow",
                                                 "<html><head/><body><p><span style=\""
                                                 " font-size:12pt; color:#21ff06;\""
                                                 ">视频转换完成!</span></p></body></html>"))
        finishWindow.exec_()
